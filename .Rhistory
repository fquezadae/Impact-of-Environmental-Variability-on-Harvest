estimate_fmt = sprintf("%.3f%s", estimate, sig)) %>%
select(model, term, estimate_fmt)
fit_biomasa <- fit_no_wind
# rm(fit_sur, fit_no_int, fit_no_wind)
library(dplyr)
library(tidyr)
library(kableExtra)
# --- 1. Extraer coeficientes, errores y p-values manualmente de cada ecuación ---
get_eq_df <- function(eq_obj, name){
coefs <- summary(eq_obj)$coefficients
data.frame(
term = rownames(coefs),
estimate = coefs[,1],
std.error = coefs[,2],
p.value = coefs[,4],
model = name,
row.names = NULL
)
}
tidy_sur <- bind_rows(
get_eq_df(fit_biomasa$eq[[1]], "Sardine"),
get_eq_df(fit_biomasa$eq[[2]], "Anchoveta"),
get_eq_df(fit_biomasa$eq[[3]], "JackMackerel")
)
# --- 2. Estandarizar nombres de variables e interacciones ---
tidy_sur <- tidy_sur %>%
mutate(term = case_when(
term %in% c("biomass_jackmackerelintrapolated:biomass_sardine",
"biomass_sardine:biomass_jackmackerelintrapolated") ~
"Sardine × Jack mackerel",
term %in% c("biomass_anchoveta:biomass_jackmackerelintrapolated",
"biomass_jackmackerelintrapolated:biomass_anchoveta") ~
"Anchoveta × Jack mackerel",
term %in% c("biomass_sardine:biomass_anchoveta",
"biomass_anchoveta:biomass_sardine") ~
"Sardine × Anchoveta",
term == "biomass_sardine" ~ "Biomass (Sardine, t)",
term == "biomass_anchoveta" ~ "Biomass (Anchoveta, t)",
term == "biomass_jackmackerelintrapolated" ~ "Biomass (Jack mackerel, t)",
term == "sst_c" ~ "SST",
term == "sst_c2" ~ "(SST) sq",
term == "chl_c" ~ "Chlorophyll-a",
term == "chl_c2" ~ "Chlorophyll-a sq",
term == "(Intercept)" ~ "Constant",
TRUE ~ term
))
# --- 3. Agregar estrellas de significancia y formatear ---
tidy_sur <- tidy_sur %>%
mutate(sig = case_when(
p.value < 0.01 ~ "***",
p.value < 0.05 ~ "**",
p.value < 0.1  ~ "*",
TRUE ~ ""
),
estimate_fmt = sprintf("%.3f%s", estimate, sig)) %>%
select(model, term, estimate_fmt)
# --- 4. Pivotear a formato tabla (una fila por variable) ---
sur_table <- tidy_sur %>%
pivot_wider(names_from = model, values_from = estimate_fmt)
# --- 5. Agregar R² ajustado ---
r2_table <- data.frame(
term = c("R-squared (Adj.)"),
Sardine = sprintf("%.3f", summary(fit_biomasa$eq[[1]])$adj.r.squared),
Anchoveta = sprintf("%.3f", summary(fit_biomasa$eq[[2]])$adj.r.squared),
JackMackerel = sprintf("%.3f", summary(fit_biomasa$eq[[3]])$adj.r.squared)
)
sur_table <- bind_rows(sur_table, r2_table)
View(sur_table)
summary(fit_no_wind)
library(corrr)
# 1. Examine correlations among all standardized predictors (not responses)
corr_df <- sur_df %>%
select(
biomass_sardine, biomass_anchoveta, biomass_jackmackerelintrapolated,
sst_c, sst_c2, chl_c, chl_c2, wind_c, wind_c2
)
library(tidyverse)
sur_df <- biomass_harvest %>%
select(
year,
biomass_t1_sardine_noharvest,
biomass_t1_anchoveta_noharvest,
biomass_t1_jackmackerel_noharvest,
biomass_sardine,
biomass_anchoveta,
biomass_jackmackerelintrapolated,
sst, chl, wind
) %>%
drop_na() %>%
mutate(
sst_c  = sst - mean(sst, na.rm = TRUE),
chl_c  = chl - mean(chl, na.rm = TRUE),
wind_c = wind - mean(wind, na.rm = TRUE),
sst_c2 = sst_c^2,
chl_c2 = chl_c^2,
wind_c2 = wind_c^2,
biomass_t1_sardine_noharvest =  biomass_t1_sardine_noharvest / 1e5,
biomass_t1_anchoveta_noharvest = biomass_t1_anchoveta_noharvest / 1e5,
biomass_t1_jackmackerel_noharvest = biomass_t1_jackmackerel_noharvest / 1e5,
biomass_sardine = biomass_sardine / 1e5,
biomass_anchoveta = biomass_anchoveta / 1e5,
biomass_jackmackerelintrapolated = biomass_jackmackerelintrapolated / 1e5,
biomass_sardine_c = biomass_sardine - mean(biomass_sardine, na.rm),
biomass_anchoveta_c = biomass_anchoveta - mean(biomass_anchoveta, na.rm),
biomass_jackmackerelintrapolated_c = biomass_jackmackerelintrapolated - mean(biomass_jackmackerelintrapolated, na.rm)
)
library(tidyverse)
sur_df <- biomass_harvest %>%
select(
year,
biomass_t1_sardine_noharvest,
biomass_t1_anchoveta_noharvest,
biomass_t1_jackmackerel_noharvest,
biomass_sardine,
biomass_anchoveta,
biomass_jackmackerelintrapolated,
sst, chl, wind
) %>%
drop_na() %>%
mutate(
sst_c  = sst - mean(sst, na.rm = TRUE),
chl_c  = chl - mean(chl, na.rm = TRUE),
wind_c = wind - mean(wind, na.rm = TRUE),
sst_c2 = sst_c^2,
chl_c2 = chl_c^2,
wind_c2 = wind_c^2,
biomass_t1_sardine_noharvest =  biomass_t1_sardine_noharvest / 1e5,
biomass_t1_anchoveta_noharvest = biomass_t1_anchoveta_noharvest / 1e5,
biomass_t1_jackmackerel_noharvest = biomass_t1_jackmackerel_noharvest / 1e5,
biomass_sardine = biomass_sardine / 1e5,
biomass_anchoveta = biomass_anchoveta / 1e5,
biomass_jackmackerelintrapolated = biomass_jackmackerelintrapolated / 1e5,
biomass_sardine_c = biomass_sardine - mean(biomass_sardine, na.rm = TRUE),
biomass_anchoveta_c = biomass_anchoveta - mean(biomass_anchoveta, na.rm = TRUE),
biomass_jackmackerelintrapolated_c = biomass_jackmackerelintrapolated - mean(biomass_jackmackerelintrapolated, na.rm, TRUE))
library(tidyverse)
sur_df <- biomass_harvest %>%
select(
year,
biomass_t1_sardine_noharvest,
biomass_t1_anchoveta_noharvest,
biomass_t1_jackmackerel_noharvest,
biomass_sardine,
biomass_anchoveta,
biomass_jackmackerelintrapolated,
sst, chl, wind
) %>%
drop_na() %>%
mutate(
sst_c  = sst - mean(sst, na.rm = TRUE),
chl_c  = chl - mean(chl, na.rm = TRUE),
wind_c = wind - mean(wind, na.rm = TRUE),
sst_c2 = sst_c^2,
chl_c2 = chl_c^2,
wind_c2 = wind_c^2,
biomass_t1_sardine_noharvest =  biomass_t1_sardine_noharvest / 1e5,
biomass_t1_anchoveta_noharvest = biomass_t1_anchoveta_noharvest / 1e5,
biomass_t1_jackmackerel_noharvest = biomass_t1_jackmackerel_noharvest / 1e5,
biomass_sardine = biomass_sardine / 1e5,
biomass_anchoveta = biomass_anchoveta / 1e5,
biomass_jackmackerelintrapolated = biomass_jackmackerelintrapolated / 1e5,
biomass_sardine_c = biomass_sardine - mean(biomass_sardine, na.rm = TRUE),
biomass_anchoveta_c = biomass_anchoveta - mean(biomass_anchoveta, na.rm = TRUE),
biomass_jackmackerelintrapolated_c = biomass_jackmackerelintrapolated - mean(biomass_jackmackerelintrapolated, na.rm = TRUE))
library(corrr)
# 1. Examine correlations among all standardized predictors (not responses)
corr_df <- sur_df %>%
select(
biomass_sardine, biomass_anchoveta, biomass_jackmackerelintrapolated,
sst_c, sst_c2, chl_c, chl_c2, wind_c, wind_c2
)
# Correlation matrix
corr_matrix <- correlate(corr_df)
corr_matrix %>% stretch(na.rm = TRUE) %>%
filter(abs(r) > 0.7) %>%
arrange(desc(abs(r))) %>%
print(n = 20)
# Quick heatmap for visualization
library(ggplot2)
library(reshape2)
# Compute correlation matrix
corr_mat <- cor(corr_df, use = "pairwise.complete.obs")
# Melt to long format for ggplot
corr_long <- melt(corr_mat, varnames = c("Var1", "Var2"), value.name = "Correlation")
# Plot
ggplot(corr_long, aes(Var1, Var2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limit = c(-1, 1), name = "r") +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid = element_blank(),
aspect.ratio = 1
) +
labs(title = "Correlation heatmap for standardized predictors",
x = NULL, y = NULL)
# 2. Variance Inflation Factor (VIF)
# We'll test VIF within each equation's design matrix
eq_sardine_vif <- lm(
biomass_t1_sardine_noharvest ~
biomass_sardine_c + I(biomass_sardine_c^2) +
biomass_sardine_c:biomass_anchoveta_c +
biomass_sardine_c:biomass_jackmackerelintrapolated_c +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2,
data = sur_df
)
vif(eq_sardine_vif) %>% sort()
eq_anchoveta_vif <- lm(
biomass_t1_anchoveta_noharvest ~
biomass_anchoveta_c + I(biomass_anchoveta_c^2) +
biomass_sardine_c:biomass_anchoveta_c +
biomass_anchoveta_c:biomass_jackmackerelintrapolated_c +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2,
data = sur_df
)
vif(eq_anchoveta_vif) %>% sort()
eq_jack_vif <- lm(
biomass_t1_jackmackerel_noharvest ~
biomass_jackmackerelintrapolated_c + I(biomass_jackmackerelintrapolated_c^2) +
biomass_sardine_c:biomass_jackmackerelintrapolated_c +
biomass_anchoveta_c:biomass_jackmackerelintrapolated_c +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2,
data = sur_df
)
vif(eq_jack_vif) %>% sort()
library(systemfit)
eq_sardine <- biomass_t1_sardine_noharvest ~
biomass_sardine + I(biomass_sardine^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine:biomass_anchoveta +
biomass_sardine:biomass_jackmackerelintrapolated
eq_anchoveta <- biomass_t1_anchoveta_noharvest ~
biomass_anchoveta + I(biomass_anchoveta^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine:biomass_anchoveta +
biomass_anchoveta:biomass_jackmackerelintrapolated
eq_jack <- biomass_t1_jackmackerel_noharvest ~
biomass_jackmackerelintrapolated + I(biomass_jackmackerelintrapolated^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine:biomass_jackmackerelintrapolated +
biomass_anchoveta:biomass_jackmackerelintrapolated
fit_sur <- systemfit(
list(
sardine      = eq_sardine,
anchoveta    = eq_anchoveta,
jackmackerel = eq_jack
),
data = sur_df,
method = "SUR"
)
summary(fit_sur)
library(systemfit)
eq_sardine <- biomass_t1_sardine_noharvest ~
biomass_sardine_c + I(biomass_sardine_c^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine_c:biomass_anchoveta_c +
biomass_sardine_c:biomass_jackmackerelintrapolated_c
eq_anchoveta <- biomass_t1_anchoveta_noharvest ~
biomass_anchoveta_c + I(biomass_anchoveta_c^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine_c:biomass_anchoveta_c +
biomass_anchoveta_c:biomass_jackmackerelintrapolated_c
eq_jack <- biomass_t1_jackmackerel_noharvest ~
biomass_jackmackerelintrapolated_c + I(biomass_jackmackerelintrapolated_c^2) +
sst_c + sst_c2 + chl_c + chl_c2 + wind_c + wind_c2 +
biomass_sardine_c:biomass_jackmackerelintrapolated_c +
biomass_anchoveta_c:biomass_jackmackerelintrapolated_c
fit_sur <- systemfit(
list(
sardine      = eq_sardine,
anchoveta    = eq_anchoveta,
jackmackerel = eq_jack
),
data = sur_df,
method = "SUR"
)
summary(fit_sur)
# --- Helper to build and fit SUR models with/without selected blocks ----
library(systemfit)
# 1. Builder of formulas given switches
build_eqs <- function(include_wind = TRUE,
include_sst2 = TRUE,
include_chl2 = TRUE,
include_interactions = TRUE) {
base_terms <- c("sst_c", "chl_c")
if (include_sst2) base_terms <- c(base_terms, "sst_c2")
if (include_chl2) base_terms <- c(base_terms, "chl_c2")
if (include_wind) base_terms <- c(base_terms, "wind_c", "wind_c2")
sard_terms <- c("biomass_sardine_c", "I(biomass_sardine_c^2)",
base_terms, if (include_interactions) c("biomass_sardine_c:biomass_jackmackerelintrapolated_c",
"biomass_sardine_c:biomass_anchoveta_c"))
anch_terms <- c("biomass_anchoveta_c", "I(biomass_anchoveta_c^2)",
base_terms, if (include_interactions) c("biomass_anchoveta_c:biomass_jackmackerelintrapolated_c",
"biomass_sardine_c:biomass_anchoveta_c"))
jack_terms <- c("biomass_jackmackerelintrapolated_c", "I(biomass_jackmackerelintrapolated_c^2)",
base_terms, if (include_interactions) c("biomass_sardine_c:biomass_jackmackerelintrapolated_c",
"biomass_anchoveta_c:biomass_jackmackerelintrapolated_c"))
f <- function(y, xs) as.formula(paste(y, "~", paste(xs, collapse = " + ")))
list(
sardine   = f("biomass_t1_sardine_noharvest", sard_terms),
anchoveta = f("biomass_t1_anchoveta_noharvest", anch_terms),
jack      = f("biomass_t1_jackmackerel_noharvest", jack_terms)
)
}
# 2. Fit the SUR given switches
fit_sur_with <- function(include_wind = TRUE,
include_sst2 = TRUE,
include_chl2 = TRUE,
include_interactions = TRUE,
data = sur_df) {
eqs <- build_eqs(include_wind, include_sst2, include_chl2, include_interactions)
systemfit(
list(
sardine      = eqs$sardine,
anchoveta    = eqs$anchoveta,
jackmackerel = eqs$jack
),
data = data,
method = "SUR"
)
}
# 3. Nested F-test between full and restricted systems
nested_F <- function(fit_full, fit_restr) {
SSR_full  <- sum(sapply(fit_full$eq,  function(m) sum(resid(m)^2)))
SSR_restr <- sum(sapply(fit_restr$eq, function(m) sum(resid(m)^2)))
df_full   <- sum(sapply(fit_full$eq,  function(m) df.residual(m)))
k_full    <- sum(sapply(fit_full$eq,  function(m) length(coef(m))))
k_restr   <- sum(sapply(fit_restr$eq, function(m) length(coef(m))))
q <- k_full - k_restr
F_stat <- ((SSR_restr - SSR_full)/q) / (SSR_full/df_full)
p_val  <- pf(F_stat, q, df_full, lower.tail = FALSE)
data.frame(
Restrictions = q,
df2 = df_full,
F = F_stat,
p_value = p_val
)
}
fit_no_wind <- fit_sur_with(include_wind = FALSE,
include_sst2 = TRUE,
include_chl2 = TRUE,
include_interactions = TRUE,
data = sur_df)
nested_F(fit_sur, fit_no_wind)
fit_no_int <- fit_sur_with(include_wind = FALSE,
include_sst2 = TRUE,
include_chl2 = TRUE,
include_interactions = FALSE,
data = sur_df)
nested_F(fit_sur, fit_no_int)
nested_F(fit_no_wind, fit_no_int)
rm(build_eqs, fit_sur_with, eq_anchoveta, eq_jack, eq_sardine, sur_df)
fit_biomasa <- fit_no_wind
# rm(fit_sur, fit_no_int, fit_no_wind)
library(dplyr)
library(tidyr)
library(kableExtra)
# --- 1. Extraer coeficientes, errores y p-values manualmente de cada ecuación ---
get_eq_df <- function(eq_obj, name){
coefs <- summary(eq_obj)$coefficients
data.frame(
term = rownames(coefs),
estimate = coefs[,1],
std.error = coefs[,2],
p.value = coefs[,4],
model = name,
row.names = NULL
)
}
tidy_sur <- bind_rows(
get_eq_df(fit_biomasa$eq[[1]], "Sardine"),
get_eq_df(fit_biomasa$eq[[2]], "Anchoveta"),
get_eq_df(fit_biomasa$eq[[3]], "JackMackerel")
)
# --- 2. Estandarizar nombres de variables e interacciones ---
tidy_sur <- tidy_sur %>%
mutate(term = case_when(
term %in% c("biomass_jackmackerelintrapolated:biomass_sardine",
"biomass_sardine:biomass_jackmackerelintrapolated") ~
"Sardine × Jack mackerel",
term %in% c("biomass_anchoveta:biomass_jackmackerelintrapolated",
"biomass_jackmackerelintrapolated:biomass_anchoveta") ~
"Anchoveta × Jack mackerel",
term %in% c("biomass_sardine:biomass_anchoveta",
"biomass_anchoveta:biomass_sardine") ~
"Sardine × Anchoveta",
term == "biomass_sardine" ~ "Biomass (Sardine, t)",
term == "biomass_anchoveta" ~ "Biomass (Anchoveta, t)",
term == "biomass_jackmackerelintrapolated" ~ "Biomass (Jack mackerel, t)",
term == "sst_c" ~ "SST",
term == "sst_c2" ~ "(SST) sq",
term == "chl_c" ~ "Chlorophyll-a",
term == "chl_c2" ~ "Chlorophyll-a sq",
term == "(Intercept)" ~ "Constant",
TRUE ~ term
))
# --- 3. Agregar estrellas de significancia y formatear ---
tidy_sur <- tidy_sur %>%
mutate(sig = case_when(
p.value < 0.01 ~ "***",
p.value < 0.05 ~ "**",
p.value < 0.1  ~ "*",
TRUE ~ ""
),
estimate_fmt = sprintf("%.3f%s", estimate, sig)) %>%
select(model, term, estimate_fmt)
# --- 4. Pivotear a formato tabla (una fila por variable) ---
sur_table <- tidy_sur %>%
pivot_wider(names_from = model, values_from = estimate_fmt)
# --- 5. Agregar R² ajustado ---
r2_table <- data.frame(
term = c("R-squared (Adj.)"),
Sardine = sprintf("%.3f", summary(fit_biomasa$eq[[1]])$adj.r.squared),
Anchoveta = sprintf("%.3f", summary(fit_biomasa$eq[[2]])$adj.r.squared),
JackMackerel = sprintf("%.3f", summary(fit_biomasa$eq[[3]])$adj.r.squared)
)
sur_table <- bind_rows(sur_table, r2_table)
fit_biomasa <- fit_no_wind
# rm(fit_sur, fit_no_int, fit_no_wind)
library(dplyr)
library(tidyr)
library(kableExtra)
# --- 1. Extraer coeficientes, errores y p-values manualmente de cada ecuación ---
get_eq_df <- function(eq_obj, name){
coefs <- summary(eq_obj)$coefficients
data.frame(
term = rownames(coefs),
estimate = coefs[,1],
std.error = coefs[,2],
p.value = coefs[,4],
model = name,
row.names = NULL
)
}
tidy_sur <- bind_rows(
get_eq_df(fit_biomasa$eq[[1]], "Sardine"),
get_eq_df(fit_biomasa$eq[[2]], "Anchoveta"),
get_eq_df(fit_biomasa$eq[[3]], "JackMackerel")
)
# --- 2. Estandarizar nombres de variables e interacciones ---
tidy_sur <- tidy_sur %>%
mutate(term = case_when(
term %in% c("biomass_jackmackerelintrapolated_c:biomass_sardine_c",
"biomass_sardine_c:biomass_jackmackerelintrapolated_c") ~
"Sardine × Jack mackerel",
term %in% c("biomass_anchoveta_c:biomass_jackmackerelintrapolated_c",
"biomass_jackmackerelintrapolated_c:biomass_anchoveta_c") ~
"Anchoveta × Jack mackerel",
term %in% c("biomass_sardine_c:biomass_anchoveta_c",
"biomass_anchoveta_c:biomass_sardine_c") ~
"Sardine × Anchoveta",
term == "biomass_sardine_c" ~ "Biomass (Sardine, t)",
term == "biomass_anchoveta_c" ~ "Biomass (Anchoveta, t)",
term == "biomass_jackmackerelintrapolated_c" ~ "Biomass (Jack mackerel, t)",
term == "sst_c" ~ "SST",
term == "sst_c2" ~ "(SST) sq",
term == "chl_c" ~ "Chlorophyll-a",
term == "chl_c2" ~ "Chlorophyll-a sq",
term == "(Intercept)" ~ "Constant",
TRUE ~ term
))
# --- 3. Agregar estrellas de significancia y formatear ---
tidy_sur <- tidy_sur %>%
mutate(sig = case_when(
p.value < 0.01 ~ "***",
p.value < 0.05 ~ "**",
p.value < 0.1  ~ "*",
TRUE ~ ""
),
estimate_fmt = sprintf("%.3f%s", estimate, sig)) %>%
select(model, term, estimate_fmt)
# --- 4. Pivotear a formato tabla (una fila por variable) ---
sur_table <- tidy_sur %>%
pivot_wider(names_from = model, values_from = estimate_fmt)
# --- 5. Agregar R² ajustado ---
r2_table <- data.frame(
term = c("R-squared (Adj.)"),
Sardine = sprintf("%.3f", summary(fit_biomasa$eq[[1]])$adj.r.squared),
Anchoveta = sprintf("%.3f", summary(fit_biomasa$eq[[2]])$adj.r.squared),
JackMackerel = sprintf("%.3f", summary(fit_biomasa$eq[[3]])$adj.r.squared)
)
sur_table <- bind_rows(sur_table, r2_table)
library(kableExtra)
tab <- kbl(
sur_table,
align   = "lccc",
caption = "\\label{tab:SUR_results}Seemingly Unrelated Regression (SUR) estimates of biomass dynamics for small pelagic species in Central--Southern Chile.",
col.names = c("Variable", "Sardine", "Anchoveta", "Jack mackerel"),
format  = "latex",
booktabs = TRUE,
escape  = FALSE,      # <- clave para permitir LaTeX en celdas y notas
linesep = ""          # opcional: elimina espacio extra entre filas
) %>%
kable_styling(
latex_options = c("hold_position", "scale_down"),
position = "center",
font_size = 10
) %>%
footnote(
general = c(
"Standard errors in parentheses. Significance levels: * p<0.1; ** p<0.05; *** p<0.01.",
"Residual correlations ($\\\\rho$): Sardine--Anchoveta = -0.44; Sardine--Jack = -0.72; Anchoveta--Jack = +0.70."
),
general_title = "",
threeparttable = TRUE,
escape = FALSE
)
cat(tab)
View(tidy_sur)
View(sur_table)
View(tidy_sur)
